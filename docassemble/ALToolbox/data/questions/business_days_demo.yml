metadata:
  title:  ALToolbox - Business Days
---
modules: 
  - .business_days
---
mandatory: True
question: |
  Introduction to the business_days module
subquestion: |
  Our business_days module is based on **python's holidays module** and provides 4 user-frindly functions. This demo explains their functionality, followed by examples of how to call them. 
  
  <span class="blue">**standard_holidays**</span> - returns standard holidays generated by the holidays module for a given country and state/province (subdiv) in a given year, it also allows removing obsolete holidays / adding local holidays. 
  
  :bell: You can use this function to list regional holidays as an output for users, or find out if you need to remove/add any holidays.
  
  <span class="blue">Input parameters:</span>
  
    1. year - integer, **required**.    
    1. country - string, **default is 'US'**. 
    1. subdiv - string (state or province), **default is 'MA'**. [Find your country and subdiv code](https://github.com/dr-prodigy/python-holidays#available-countries)
    1. add_holidays - dict, **default is None** 
      - Used to add local holidays
      - ex: add_special_days = {
    '01-03': "Special Day1", 
    '02-04': "Special Day2"}
    1. remove_holidays - list of strings, **default is None**. 
        - Used to delete obsolete standard holidays
        - ex: delete_days = ["evacuation"], note that the string is case insensitive and can be a partial holiday name  
        - For MA in USA, the module already removed the Evacuation Day
    
  <span class="blue">**non_business_days**</span> - returns a list of non-business days (holidays + weekends). 
  
  <span class="blue">Input parameters:</span>
  
    1. year - see standard_holidays    
    1. country - see standard_holidays
    1. subdiv - see standard_holidays
    1. add_holidays - see standard_holidays
    1. remove_holidays - see standard_holidays
    1. first_n_dates - integer, **default is 0**
        - Used to extract the first n non-business days      
    1. last_n_dates - integer, **default is 0**
        - Used to extract the last n non-business days   
    
  :bell: If first_n_dates=0 and last_n_dates=0, you get the full list.<br>
  if first_n_dates>0 and last_n_dates>0, you get the first and last subsets of days in the given year.
    
  <span class="blue">**is_business_day**</span> - returns a boolean True/False for a given date.
  
  <span class="blue">Input parameters:</span>
  
    1. date - **required**. ex: '02/15/2022'.
    1. country - see standard_holidays
    1. subdiv - see standard_holidays
    1. add_holidays - see standard_holidays
    1. remove_holidays - see standard_holidays
    
  <span class="blue">**get_next_business_day**</span> - returns the next business day for a given star-date plus a waiting period. 
  
  <span class="blue">Input parameters:</span>
  
    1. start_date - **required**. ex: '02/15/2022'. 
    1. wait_n_days - integer, **default is 1**. This is the waiting period.
    1. country - see standard_holidays
    1. subdiv - see standard_holidays
    1. add_holidays - see standard_holidays
    1. remove_holidays - see standard_holidays
   
field: intro
css: |
  <style>
    .blue {color: #18aff9;}
  </style>  
---
question: |
  Pick a start date and a waiting period
fields: 
  - Start date: my_date
    datatype: date
    default: '12/28/2022'
  - How many days to wait: wait_days
    datatype: integer
    default: 4
---
mandatory: True
question: |  
  How to call the 4 functions
subquestion: |
  ##### User input
  You entered ${my_date}, and you wanted to wait for ${wait_days} day(s).
  
  ##### is_business_day
  Is ${my_date} a business day in MA, USA? ${ma_b_date}<br>
  
  ##### get_next_business_day [remove 1 and add 2 holidays]
  Based on your input, the next business day after the waiting period is ${ma_next_bdate}     
  
  _For a cross-year input scenario (as defaulted on the input screen), the following two sections provide handy references to varify the output from get_next_business_day._
  
  ##### non_business_days [use last_n_dates] 
  The last 5 non-business days in **MA of USA** in 2022: <br>
  %for day, name in ma_off_days.items():
    ${day}: ${name}<br>
  %endfor
  
  ##### non_business_days [use first_n_dates]
  The first 10 non-business days in **MA of USA** in 2023: <br>
  %for day, name in ma_off_days2.items():
    ${day}: ${name}<br>
  %endfor
  
  _The following sections are useful if you need to decide whether or not to remove/add any holidays._<br>  
  
  ##### standard_holidays [use default country and subdiv]  
  **MA of USA** standard holidays in 2022: <br>
  %for day, name in ma_standard_holidays.items():
    ${day}: ${name}<br>
  %endfor
  
  ##### standard_holidays [override default subdiv]
  **NY of USA** holidays in 2022: <br>
  %for day, name in ny_off_days.items():
    ${day}: ${name}<br>
  %endfor
  
  ##### standard_holidays [override default country and subdiv]
  **Nova Scotia of Canada** holidays in 2022: <br>
  %for day, name in canada_off_days.items():
    ${day}: ${name}<br>
  %endfor
css: |
  <style>
    h5 {color: #842424;}
  </style>  
---
comment: Specify these inputs in a separate code block so they can be reused
code: |  
  delete_days = ["martin"]    
  add_special_days = {
    '01-03': "Special Day1", 
    '01-17': "Special Day2"
  }
---
code: |  
  ma_b_date = is_business_day(date=my_date)   
  
  ma_next_bdate = get_next_business_day(start_date=my_date, wait_n_days=wait_days, add_holidays=add_special_days, remove_holidays=delete_days)   
     
  ma_off_days = non_business_days(year=2022, add_holidays=add_special_days, remove_holidays=delete_days, last_n_dates=5)
  ma_off_days2 = non_business_days(year=2023, add_holidays=add_special_days, remove_holidays=delete_days, first_n_dates=10)
  
  ma_standard_holidays = standard_holidays(year=2022)   
  ny_off_days = standard_holidays(year=as_datetime(my_date).year, subdiv='NY')  
  canada_off_days = standard_holidays(year=as_datetime(my_date).year, country='CAN', subdiv='NS')