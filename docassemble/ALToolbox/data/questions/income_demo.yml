metadata:
  title:  ALToolbox - Income
---
modules: 
  - .income
---
objects:
  - compound_jobs_list: ALMultipartJobList.using(
      complete_attribute='complete',
      ask_number=True)
  - compound_job: ALMultipartJob.using(
      complete_attribute='complete',
      there_is_another=False)
  - jobs: ALJobList.using(
      complete_attribute='complete',
      there_is_another=False)
  - job: ALJob
  - incomes: ALIncomeList.using(
      complete_attribute='complete',
      there_is_another=False)
  - income: ALIncome
---
mandatory: True
code: |
  # Multipart job list
  compound_jobs_list.gather()
  
  # Multipart job
  compound_job.period
  get_compound_job_sources
  compound_job.gather()

  # Individual job
  job.source = 'Random Work'
  job.value
  
  # List of incomes
  income_sources
  get_income_sources
  incomes.gather()
  
  # Individual income
  income.source = 'Random Income'
  income.value
  
  before_end_so_answer_are_saved
  end
---
code: |
  job_source_transaction_types = {
    'tip': 'payment',
    'deduction': 'deduction',
    'garnishment': 'deduction'
  }
---
code: |
  # commission, bonus, hourly wage, salary, overtime
  job_income_choices = [
    ('tip', 'Tip'),
    ('deduction', 'Deduction'),
    ('garnishment', 'Garnishment')
  ]
---
# MULTIPART JOBS LIST
---
code: |
  compound_jobs_list[i].complete_attribute='complete'
  compound_jobs_list[i].there_is_another=False
  compound_jobs_list[i].there_are_any=True
  compound_jobs_list[i].source
  compound_jobs_list[i].period
  compound_jobs_list[i].job_sources
  compound_jobs_list[i].get_line_item_sources
  compound_jobs_list[i].gather()
  compound_jobs_list[i].complete = True
---
generic object: ALMultipartJob
code: |
  if x.job_sources.any_true():
    for source in x.job_sources.true_values():
      x.appendObject(source=source)
  x.get_line_item_sources = True
---
generic object: ALMultipartJob
code: |
  x[i].transaction_type = job_source_transaction_types[x[i].source]
  x[i].value
  x[i].complete = True
---
id: how many jobs
question: |
  How many jobs do you have?
fields:
  - no label: compound_jobs_list.target_number
---
id: compound job name
generic object: ALMultipartJob
question: |
  What is the name of this job?
fields:
  - Job name: x.source
---
id: job parts
generic object: ALMultipartJob
question: |
  Does your ${ x.source } job have any of the below?
fields:
  - no label: x.job_sources
    datatype: checkboxes
    code: job_income_choices
---
# MULTIPART JOB
---
code: |
  if job_sources.any_true():
    for source in job_sources.true_values():
      job_part = compound_job.appendObject(source=source)
  get_compound_job_sources = True
---
code: |
  compound_job[i].transaction_type = job_source_transaction_types[compound_job[i].source]
  compound_job[i].value
  compound_job[i].complete = True
---
id: job parts
question: |
  Does your (compound) job have any of the below?
fields:
  - no label: job_sources
    datatype: checkboxes
    code: job_income_choices
---
id: multipart job period
generic object: ALMultipartJob
question: |
  Tell us about your (compound) job hours
fields:
  - Hourly or salary?: x.is_hourly
    input type: radio
    choices:
      - Hourly: True
      - Salary: False
  - How often do you get paid?: x.period
    input type: radio
    code: |
      income_period_list()
  - How many hours do you work during that time?: x.hours_per_period
    input type: number
    show if: x.is_hourly
---
#  - How much do you get paid per hour?: 
id: payment value
generic object: ALMultipartJob
if: |
  x[i].transaction_type != 'deduction'
question: |
  What how much do you get paid for ${ x[i].source }?
fields:
  - Amount: x[i].value
    datatype: currency
---
id: deduction value
generic object: ALMultipartJob
if: |
  x[i].transaction_type == 'deduction'
question: |
  What is removed from your paycheck for the ${ x[i].source }?
fields:
  - Amount: x[i].value
    datatype: currency
---
# JOBS
---
id: single job value
generic object: ALJob
question: |
  What how much do you get paid for ${ x.source }?
fields:
  - Amount: x.value
    datatype: currency
  - Period: x.period
    input type: radio
    code: |
      income_period_list()
---
# INCOMES
---
code: |
  if income_sources.any_true():
    for source in income_sources.true_values():
      one_income = incomes.appendObject(source=source)
  get_income_sources = True
---
generic object: ALIncomeList
code: |
  x[i].value
  x[i].complete = True
---
id: which incomes
question: |
  What are your sources of income?
fields:
  - no label: income_sources
    datatype: checkboxes
    code: |
      income_source_list()
---
# ONE INCOME
---
id: income value
generic object: ALIncome
question: |
  What how much do you get paid for ${ x.source }?
fields:
  - Amount: x.value
    datatype: currency
  - Period: x.period
    input type: radio
    code: |
      income_period_list()
---
# ENDING SCREENS
---
id: before_end_so_answer_are_saved
question: |
  Avoid re-entering the answers
continue button field: before_end_so_answer_are_saved
---
id: end
event: end
question: |
  Your answers
subquestion: |

  ## List of multipart jobs
  
  % for multi_job in compound_jobs_list:
  **${ multi_job.source }:**
  
  * ${ currency( multi_job.gross() ) } **gross**
  * ${ currency( multi_job.net() ) } **net**
  
  % endfor

  ## One multipart job
  
  compound_job gross: ${ currency( compound_job.gross() ) } per year
  
  compound_job net: ${ currency( compound_job.net() ) } per year
  
  ## Regular job
  
  ${ job.source } gross: ${ currency( job.value ) } ${ job.period } times per year
  
  ## One income
  
  ${ income.source } income: ${ currency( income.value ) } ${ income.period } times per year
  
  ## List of incomes
  
  Other incomes:
  
  % for one_income in incomes:
  * ${ one_income.source }: ${ currency( one_income.value ) } ${ one_income.period } times per year
  % endfor
---