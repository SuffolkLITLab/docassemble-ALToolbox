metadata:
  title:  ALToolbox - Income
---
modules: 
  - .income
---
objects:
  - paystub_list: ALPaystubList.using(
      complete_attribute='complete',
      ask_number=True)
  - paystub: ALPaystub.using(
      complete_attribute='gather_line_items',
      there_is_another=False)
  - jobs: ALJobList.using(
      complete_attribute='complete',
      there_is_another=False)
  - job: ALJob
  - incomes: ALIncomeList.using(
      complete_attribute='complete',
      there_is_another=False)
  - income: ALIncome
---
mandatory: True
code: |
  if to_run['ALPaystubList'] or to_run['all']:
    paystub_list.gather()
  
  if to_run['ALPaystub'] or to_run['all']:
    paystub.source
    paystub.employer.name.first
    paystub.period
    paystub.get_line_item_sources
    paystub.gather()
  
  if to_run['ALJob'] or to_run['all']:
    job.source = 'Random Work'
    job.employer
    job.value
  
  if to_run['ALIncomeList'] or to_run['all']:
    income_sources
    get_income_sources
    incomes.gather()
  
  if to_run['ALIncome'] or to_run['all']:
    income.source = 'Random Income'
    income.value
  
  before_end_so_answers_are_saved
  end
---
id: which to test
question: |
  Which functionality do you want to try?
subquestion: |
  Before choosing what to test:
  
  `ALPaystubList` covers all the same functionality as `ALPaystub`.
  
  `ALIncomeList` covers all the same functionality as `ALIncome`.
  
  
# Other classes are testing ALIncomeList's also needs to test
#  √ sources

# ALIncomeList's also needs to test
#  owners
#  matches
#  total
#  market_value
#  balance
#  to_json

fields:
  - no label: to_run
    datatype: checkboxes
    choices:
      - All of the them: all
      #- ALSimpleValue: ALSimpleValue
      #- ALValueList: ALValueList
      - ALPaystubList: ALPaystubList
      - ALPaystub: ALPaystub
      - ALJobList: ALJobList
      - ALJob: ALJob
      - ALIncomeList: ALIncomeList
      - ALIncome: ALIncome
      #- ALLedger: ALLedger
      #- ALVehicle: ALVehicle
      #- ALVehicleList: ALVehicleList
      #- ALAsset: ALAsset
      #- ALAssetList: ALAssetList
      #- flatten: flatten
      #- income_period_list: income_period_list
      #- income_period: income_period
      #- recent_years: recent_years
      #- asset_source_list: asset_source_list
      #- income_source_list: income_source_list
      #- non_wage_income_list: non_wage_income_list
      #- expense_source_list: expense_source_list
---
code: |
  job_source_transaction_types = {
    'tips': 'payment',
    'deductions': 'deduction',
    'garnishments': 'deduction'
  }
---
code: |
  # commission, bonus, hourly wage, salary, overtime
  # https://fingercheck.com/the-difference-between-a-paycheck-and-a-pay-stub/
  #Deductions are the amounts subtracted or withheld from the total pay, including the income tax percentage of an employee’s gross wages.
  #Social security and Medicare are deducted based on the income over the set threshold.
  #Other deductions can include state and local income taxes, employee 401K contributions, insurance payments, profit sharing, union dues, garnishments and unemployment insurance etc.
  job_income_choices = [
    ('tips', 'Tips'),
    ('deductions', 'Deductions'),
    ('garnishments', 'Garnishments')
  ]
---
# JOB/PAYSTUB SHARED QUESTIONS
---
id: employer
generic object: DAObject
question: |
  Tell us about your employer for ${ x.source }
fields:
  - Name: x.employer.name.first
  - street: x.employer.address.address
    required: False
  - unit: x.employer.address.unit
    required: False
  - city: x.employer.address.city
    required: False
  - state: x.employer.address.state
    required: False
  - zip: x.employer.address.zip
    required: False
  - Phone number: x.employer.phone_number
    required: False
---
# SHARED BY PAYSTUBS
---
generic object: ALPaystub
code: |
  if x.line_item_sources.any_true():
    for source in x.line_item_sources.true_values():
      x.appendObject(source=source)
      # Never put anything else in here
  x.get_line_item_sources = True
---
generic object: ALPaystub
code: |
  x[i].transaction_type = job_source_transaction_types[x[i].source]
  x[i].value
  x[i].gather_line_items = True
---
id: job name for paystub
generic object: ALPaystub
question: |
  What is the name of this job?
fields:
  - Job name: x.source
---
id: list items
generic object: ALPaystub
question: |
  Does your ${ x.source } job have any of the below?
fields:
  - no label: x.line_item_sources
    datatype: checkboxes
    code: job_income_choices
---
id: paystub period
generic object: ALPaystub
question: |
  Tell us about your ${ x.source }'s job hours
fields:
  - Hourly or salary?: x.is_hourly
    input type: radio
    choices:
      - Hourly: True
      - Salary: False
  - How often do you get paid?: x.period
    input type: radio
    code: |
      income_period_list()
  - How many hours do you work during that time?: x.hours_per_period
    input type: number
    show if: x.is_hourly
---
#  - How much do you get paid per hour?: 
id: payment value
generic object: ALPaystub
if: |
  x[i].transaction_type != 'deduction'
question: |
  What how much do you get paid for ${ x.source }'s ${ x[i].source }?
fields:
  - Amount: x[i].value
    datatype: currency
---
id: deduction value
generic object: ALPaystub
if: |
  x[i].transaction_type == 'deduction'
question: |
  What is removed from your paycheck for ${ x.source }'s ${ x[i].source }?
fields:
  - Amount: x[i].value
    datatype: currency
---
# PAYSTUBS LIST (Unique items)
---
code: |
  paystub_list[i].complete_attribute='gather_line_items'
  paystub_list[i].there_is_another=False
  paystub_list[i].there_are_any=True
  paystub_list[i].source
  paystub_list[i].employer.name.first
  paystub_list[i].period
  paystub_list[i].line_item_sources
  paystub_list[i].get_line_item_sources
  paystub_list[i].gather()
  paystub_list[i].complete = True
---
id: how many jobs
question: |
  How many jobs do you have?
fields:
  - no label: paystub_list.target_number
---
# ONE JOB
---
id: single job value
generic object: ALJob
question: |
  What how much do you get paid for ${ x.source }?
fields:
  - Amount: x.value
    datatype: currency
  - Period: x.period
    input type: radio
    code: |
      income_period_list()
---
id: single job employer
generic object: ALJob
question: |
  Tell us about your employer
fields:
  - Name: x.employer
  - Address: x.employer_address
  - Phone: x.employer_phone
---
# INCOMES
---
code: |
  if income_sources.any_true():
    for source in income_sources.true_values():
      one_income = incomes.appendObject(source=source)
      # Never put anything else in here
  get_income_sources = True
---
generic object: ALIncomeList
code: |
  x[i].value
  x[i].complete = True
---
id: which incomes
question: |
  What are your sources of income?
fields:
  - no label: income_sources
    datatype: checkboxes
    code: |
      income_source_list()
---
# ONE INCOME
---
id: income value
generic object: ALIncome
question: |
  What how much do you get paid for ${ x.source }?
fields:
  - Amount: x.value
    datatype: currency
  - Period: x.period
    input type: radio
    code: |
      income_period_list()
---
# ENDING SCREENS
---
id: before_end_so_answers_are_saved
question: |
  Avoid re-entering the answers
continue button field: before_end_so_answers_are_saved
---
id: end
event: end
question: |
  Your answers
subquestion: |

  % if to_run['ALPaystubList'] or to_run['all']:
  ## List of paystubs (jobs)
  
  All jobs together:
  
  * **gross:** ${ currency( paystub_list.gross() ) }
  * **net:** ${ currency( paystub_list.net() ) }
  
  % for one_paystub in paystub_list:
  ### ${ one_paystub.source }
  
  **Employer info:**
  
  ${ one_paystub.employer_name_address_phone() }
  
  % if one_paystub.is_hourly:
  **Hours:** ${ one_paystub.normalized_hours(12) } per month
  % else:
  The `normalized_hours()` function was excluded because it's only for hourly jobs.
  % endif
  
  Totals
  
  * **gross:** ${ currency( one_paystub.gross() ) }
  * **net:** ${ currency( one_paystub.net() ) }
  
  #### Line items
  
  Money coming in:
  
  % for line_item in one_paystub.line_items(transaction_type='payment'):
  * ${ line_item.source }: ${currency( one_paystub.period_value( line_item, times_per_year=1 ))}
  % endfor
  
  Money going out:
  
  % for line_item in one_paystub.line_items(transaction_type='deduction'):
  * ${ line_item.source }: ${currency( one_paystub.absolute_period_value( line_item, times_per_year=1 ))}
  % endfor
  
  % endfor
  
  #### `paystub_list` JSON
  
  ${ paystub_list.to_json() }
  
  ---

  % endif
  
  % if to_run['ALPaystub'] or to_run['all']:
  ## Sinble paystub for ${ paystub.source }
  
  **Employer info:** ${ paystub.employer_name_address_phone() }
  
  % if paystub.is_hourly:
  **Hours:** ${ paystub.normalized_hours(12) } per month
  % else:
  The `normalized_hours()` function was excluded because it's only for hourly jobs.
  % endif
  
  **paystub gross:** ${ currency( paystub.gross() ) } per year
  
  **paystub net:** ${ currency( paystub.net() ) } per year
  
  Money coming in:
  
  % for item in paystub.line_items(transaction_type='payment'):
  * ${ item.source }: ${currency( paystub.period_value( item, times_per_year=1 ))}
  % endfor
  
  Money going out:
  
  % for item in paystub.line_items(transaction_type='deduction'):
  * ${ item.source }: ${currency( paystub.absolute_period_value( item, times_per_year=1 ))}
  % endfor
  
  #### `paystub` JSON
  
  ${ paystub.to_json() }
  
  ---
  
  % endif
  
  % if to_run['ALJob'] or to_run['all']:
  ## Job: ${ job.source }
  
  **Employer info:**
  
  ${ job.name_address_phone() }
  
  * **gross:** ${ currency( job.gross_per_period() ) } per year
  * **net:** ${ currency( job.net_per_period() ) } per year
  
  ---
  
  % endif
  
  % if to_run['ALIncomeList'] or to_run['all']:
  ## List of incomes
  
  % for one_income in incomes:
  * ${ one_income.source }: ${ currency( one_income.value ) } ${ one_income.period } times per year
  % endfor
  
  ---
  
  % endif
  
  % if to_run['ALIncome'] or to_run['all']:
  ## One income
  
  ${ income.source } income: ${ currency( income.value ) } ${ income.period } times per year
  
  ---
  
  % endif
---