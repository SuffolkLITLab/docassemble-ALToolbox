metadata:
  title:  ALToolbox - Income
---
modules: 
  - .income
---
objects:
  - itemized_job_list: ALItemizedJobList.using(
      complete_attribute='complete',
      ask_number=True)
  - itemized_job: ALItemizedJob.using()
  #  auto_gather=False,
  #  gathered=True)
  - jobs: ALJobList.using(
      complete_attribute='complete',
      there_is_another=False)
  - job: ALJob
  - incomes: ALIncomeList.using(
      complete_attribute='complete',
      there_is_another=False)
  - income: ALIncome
---
mandatory: True
code: |
  if to_run['ALItemizedJob'] or to_run['all']:
    itemized_job.name = 'AnItemizedJob'
    itemized_job.complete
    #itemized_job.period
    #itemized_job.in_values.there_are_any = True
    #itemized_job.out_values.there_are_any = True
    #itemized_job.in_values["wages"].is_hourly = True
    #itemized_job.in_values["wages"].value
    #itemized_job.in_values.there_is_another = False
    #itemized_job.out_values.there_is_another = False
    #itemized_job.employer.name.first
  
  if to_run['ALItemizedJobList'] or to_run['all']:
    itemized_job_list.gather()
  
  if to_run['ALJob'] or to_run['all']:
    job.name = 'Random Work'
    job.employer
    job.value
  
  if to_run['ALIncomeList'] or to_run['all']:
    income_sources
    get_income_sources
    incomes.gather()
  
  if to_run['ALIncome'] or to_run['all']:
    income.source = 'Random Income'
    income.value
  
  before_end_so_answers_are_saved
  end
---
id: which to test
question: |
  Which functionality do you want to try?
subquestion: |
  Before choosing what to test:
  
  `ALItemizedJobList` covers all the same functionality as `ALItemizedJob`.
  
  `ALIncomeList` covers all the same functionality as `ALIncome`.
  
  
# Other classes are testing ALIncomeList's also needs to test
#  √ sources

# ALIncomeList's also needs to test
#  owners
#  matches
#  total
#  market_value
#  balance
#  to_json

fields:
  - no label: to_run
    datatype: checkboxes
    choices:
      - All of the them: all
      #- ALSimpleValue: ALSimpleValue
      #- ALValueList: ALValueList
      - ALItemizedJobList: ALItemizedJobList
      - ALItemizedJob: ALItemizedJob
      #- ALJobList: ALJobList
      #- ALJob: ALJob
      #- ALIncomeList: ALIncomeList
      #- ALIncome: ALIncome
      #- ALLedger: ALLedger
      #- ALVehicle: ALVehicle
      #- ALVehicleList: ALVehicleList
      #- ALAsset: ALAsset
      #- ALAssetList: ALAssetList
      #- flatten: flatten
      #- income_period_list: income_period_list
      #- income_period: income_period
      #- recent_years: recent_years
      #- asset_source_list: asset_source_list
      #- income_source_list: income_source_list
      #- non_wage_income_list: non_wage_income_list
      #- expense_source_list: expense_source_list
---
code: |
  job_source_transaction_types = {
    'tips': 'payment',
    'deductions': 'deduction',
    'garnishments': 'deduction'
  }
---
code: |
  # commission, bonus, hourly wage, salary, overtime
  # https://fingercheck.com/the-difference-between-a-paycheck-and-a-pay-stub/
  #Deductions are the amounts subtracted or withheld from the total pay, including the income tax percentage of an employee’s gross wages.
  #Social security and Medicare are deducted based on the income over the set threshold.
  #Other deductions can include state and local income taxes, employee 401K contributions, insurance payments, profit sharing, union dues, garnishments and unemployment insurance etc.
  job_income_choices = [
    ('tips', 'Tips'),
    ('deductions', 'Deductions'),
    ('garnishments', 'Garnishments')
  ]
---
# JOB/ITEMIZED_JOB SHARED QUESTIONS
---
id: employer
generic object: DAObject
question: |
  Tell us about your employer for ${ x.name }
fields:
  - Name: x.employer.name.first
  - street: x.employer.address.address
    required: False
  - unit: x.employer.address.unit
    required: False
  - city: x.employer.address.city
    required: False
  - state: x.employer.address.state
    required: False
  - zip: x.employer.address.zip
    required: False
  - Phone number: x.employer.phone_number
    required: False
---
# SHARED BY ITEMIZED JOB-RELATED OBJECTS
---
generic object: ALItemizedJob
code: |
  x.name
  #x.employer.name.first
  x.period
  x.in_values.complete_attribute = 'complete'
  x.in_values["wages"].value
  x.in_values["wages"].is_hourly = True
  x.in_values.gather()
  x.out_values.gather()
  x.complete = True
  ## Why are these necessary for one itemized job, while not for a list of them?
  #x.there_is_another = False
---
generic object: ALItemizedJob
code: |
  x.in_values[i].value
  x.in_values[i].complete = True
---
id: job name for itemized_job
generic object: ALItemizedJob
question: |
  What is the name of this job?
fields:
  - Job name: x.name
---
id: line items for objs
generic object: ALItemizedJob
question: |
    Enter info from your paystub for your ${ x.name } job
fields:
    - What are your wages for this job?: x.in_values['wages'].value
      datatype: currency
    - What are your tips for this job?: x.in_values['tips'].value
      datatype: currency
      required: False
    - What is your federal tax amount?: x.out_values['federal_taxes'].value
      datatype: currency
      required: False
    - What do you pay for insurance?: x.out_values['insurance'].value
      datatype: currency
      required: False
    - Does the job have other incomes?: x.in_values.there_is_another
      datatype: yesnoradio
    - Does the job have other deductions?: x.out_values.there_is_another
      datatype: yesnoradio
---
id: itemized_job period
generic object: ALItemizedJob
question: |
  Tell us about your ${ x.name }'s job hours
fields:
  - Hourly or salary?: x.is_hourly
    input type: radio
    choices:
      - Hourly: True
      - Salary: False
  - How often do you get paid?: x.period
    input type: radio
    code: |
      income_period_list()
  - How many hours do you work during that time?: x.hours_per_period
    input type: number
    show if: x.is_hourly
---
id: other income name
generic object: ALItemizedJob
question: |
  Other incomes
fields:
  - Income name: x.in_values.new_item_name
---
id: other income value
generic object: ALItemizedJob
question: |
  What do you get paid for ${ x.in_values[i] } in your ${ x.name } job?
fields:
  - Amount: x.in_values[i].value
    datatype: currency
  - Do you have another source of income?: x.in_values.there_is_another
    datatype: yesnoradio
---
# ITEMIZED_JOB LIST (Unique items)
---
id: how many jobs
question: |
  How many jobs do you have?
fields:
  - no label: itemized_job_list.target_number
    datatype: number
---
# ONE REGULAR JOB
---
id: single job value
generic object: ALJob
question: |
  What how much do you get paid for ${ x.name }?
fields:
  - Amount: x.value
    datatype: currency
  - Period: x.period
    input type: radio
    code: |
      income_period_list()
---
id: single job employer
generic object: ALJob
question: |
  Tell us about your employer
fields:
  - Name: x.employer
  - Address: x.employer_address
  - Phone: x.employer_phone
---
# INCOMES
---
code: |
  if income_sources.any_true():
    for source in income_sources.true_values():
      one_income = incomes.appendObject(source=source)
      # Never put anything else in here
  get_income_sources = True
---
generic object: ALIncomeList
code: |
  x[i].value
  x[i].complete = True
---
id: which incomes
question: |
  What are your sources of income?
fields:
  - no label: income_sources
    datatype: checkboxes
    code: |
      income_source_list()
---
# ONE INCOME
---
id: income value
generic object: ALIncome
question: |
  What how much do you get paid for ${ x.source }?
fields:
  - Amount: x.value
    datatype: currency
  - Period: x.period
    input type: radio
    code: |
      income_period_list()
---
# ENDING SCREENS
---
id: before_end_so_answers_are_saved
question: |
  Avoid re-entering the answers
continue button field: before_end_so_answers_are_saved
---
id: end
event: end
question: |
  Your answers
subquestion: |
  
  % if to_run['ALItemizedJob'] or to_run['all']:
  ## Single itemized_job called ${ itemized_job.name }
  
  **In:**
  
  % for name, line_item in itemized_job.in_values.elements.items():
  * ${ name }: ${ currency( line_item.value )}
  % endfor
  
  **Out:**
  
  % for name, line_item in itemized_job.out_values.elements.items():
  * ${ name }: ${ currency( line_item.value )}
  % endfor
  
  **gross per year:** ${currency(itemized_job.gross_amount())}[BR]
  **net per year:** ${currency(itemized_job.net_amount())}[BR]
  **total (net) per year:** ${currency(itemized_job.total())}[BR]
  **money out:** ${currency(itemized_job.total_out())}
  
  **total per month:** ${currency(itemized_job.total(12))}
  
  Two different ways of printing money coming in:
  
  % for name, item in itemized_job.in_values.complete_elements().items():
  * **${ name } per month:** ${ currency(itemized_job.total( source=name, times_per_year=12 )) }
  * **${ name } per week:** ${ currency(itemized_job.item_amount( item, annual_frequency=52 )) }
  % endfor
  
  **${itemized_job.name} json:**
  
  ```
  ${ json.dumps(itemized_job.to_json()) }
  ```
  
  ---
  
  % endif

  % if to_run['ALItemizedJobList'] or to_run['all']:
  ## Itemized jobs list
  
  Amounts totals:
  
  * **gross per year:** ${currency( itemized_job_list.gross_amount() )}
  * **gross per month:** ${currency( itemized_job_list.gross_amount(times_per_year=12) )}
  * **net per year:** ${currency( itemized_job_list.net_amount() )}
  * **net per week:** ${currency( itemized_job_list.net_amount(times_per_year=52) )}
  * **money out per year:** ${currency(itemized_job_list.total_out())}
  
  The below only shows useful amounts when both "wages" and "federal_taxes" have amounts:
  
  * **wages gross:** ${currency( itemized_job_list.gross_amount(source=['wages']) )}
  * **wages and federal_taxes gross:** (same) ${currency( itemized_job_list.gross_amount(source=['wages', 'federal_taxes']) )} per year
  * **wages net:** (same) ${currency( itemized_job_list.net_amount(source=['wages']) )} per year
  * **wages and federal_taxes net:** ${currency( itemized_job_list.net_amount(source=['wages', 'federal_taxes']) )} per year
  
  % for one_itemized_job in itemized_job_list:
  #### ${ one_itemized_job.name }
  
  * **gross:** ${ currency( one_itemized_job.gross_amount() ) }
  * **gross:** ${ currency( one_itemized_job.gross_amount(times_per_year=12) ) } per month
  * **net:** ${currency( one_itemized_job.net_amount() )} per year
  * **net:** ${currency( one_itemized_job.net_amount(times_per_year=52) )} per week
  * **money out per year:** ${currency(one_itemized_job.total_out())}
  
  Two different ways of printing money coming in:
  
  % for name, item in one_itemized_job.in_values.complete_elements().items():
  * **${ name } per month:** ${ currency(one_itemized_job.total( source=name, times_per_year=12 )) }
  * **${ name } per week:** ${ currency(one_itemized_job.item_amount( item, annual_frequency=52 )) }
  % endfor
  
  **${one_itemized_job.name} json:**
  
  ```
  ${ json.dumps(one_itemized_job.to_json()) }
  ```
  
  % endfor
  
  **JSON for itemized job list**
  
  ```
  ${ json.dumps(itemized_job_list.to_json()) }
  ```
  
  ---
  
  % endif

comment: |
  
  % if to_run['ALItemizedJobList'] or to_run['all']:
  ## List of itemized jobs
  
  All jobs together:
  
  * **gross:** ${ currency( itemized_job_list.gross() ) }
  * **net:** ${ currency( itemized_job_list.net() ) }
  * **total:** ${ currency( itemized_job_list.total() ) }
  
  % for one_itemized_job in itemized_job_list:
  ### ${ one_itemized_job.name }
  
  **Employer info:**[BR]
  ${ one_itemized_job.employer_name_address_phone() }
  
  % if one_itemized_job.is_hourly:
  **Hours:** ${ one_itemized_job.normalized_hours(12) } per month
  % else:
  The `normalized_hours()` function was excluded because it's only for hourly jobs.
  % endif
  
  Totals
  
  * **gross:** ${ currency( one_itemized_job.gross() ) }
  * **net:** ${ currency( one_itemized_job.net() ) }
  * **total:** ${ currency( one_itemized_job.total() ) }
  
  #### Line items
  
  Money coming in:
  
  % for line_item in one_itemized_job.line_items(transaction_type='payment'):
  * ${ line_item.source }: ${currency( one_itemized_job.period_value( line_item, times_per_year=1 ))}
  % endfor
  
  Money going out:
  
  % for line_item in one_itemized_job.line_items(transaction_type='deduction'):
  * ${ line_item.source }: ${currency( one_itemized_job.absolute_period_value( line_item, times_per_year=1 ))}
  % endfor
  
  % endfor
  
  #### `itemized_job_list` JSON
  
  ${ itemized_job_list.to_json() }
  
  ---

  % endif
  
  % if to_run['ALItemizedJob'] or to_run['all']:
  ## Sinble itemized_job for ${ itemized_job.name }
  
  **Employer info:**[BR]
  ${ itemized_job.employer_name_address_phone() }
  
  % if itemized_job.is_hourly:
  **Hours:** ${ itemized_job.normalized_hours(12) } per month
  % else:
  The `normalized_hours()` function was excluded because it's only for hourly jobs.
  % endif
  
  Totals
  
  * **itemized_job gross:** ${ currency( itemized_job.gross() ) } per year
  * **itemized_job net:** ${ currency( itemized_job.net() ) } per year
  * **itemized_job total:** ${ currency( itemized_job.total() ) }
  
  Money coming in:
  
  % for item in itemized_job.line_items(transaction_type='payment'):
  * ${ item.source }: ${currency( itemized_job.period_value( item, times_per_year=1 ))}
  % endfor
  
  Money going out:
  
  % for item in itemized_job.line_items(transaction_type='deduction'):
  * ${ item.source }: ${currency( itemized_job.absolute_period_value( item, times_per_year=1 ))}
  % endfor
  
  #### `itemized_job` JSON
  
  ${ itemized_job.to_json() }
  
  ---
  
  % endif
  
  % if to_run['ALJob'] or to_run['all']:
  ## Job: ${ job.name }
  
  **Employer info:**
  
  ${ job.name_address_phone() }
  
  * **gross:** ${ currency( job.gross_amount() ) } per year
  * **net:** ${ currency( job.net_amount() ) } per year
  
  ---
  
  % endif
  
  % if to_run['ALIncomeList'] or to_run['all']:
  ## List of incomes
  
  % for one_income in incomes:
  * ${ one_income.source }: ${ currency( one_income.value ) } ${ one_income.period } times per year
  % endfor
  
  ---
  
  % endif
  
  % if to_run['ALIncome'] or to_run['all']:
  ## One income
  
  ${ income.source } income: ${ currency( income.value ) } ${ income.period } times per year
  
  ---
  
  % endif
---